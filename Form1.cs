using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;
using libAnnaC;
using AutoGenerated;

namespace WTFdtsf_winUI
{
    public partial class Form1 : Form
    {
        List<string> lstResults = new List<string>();
        List<string> asChar = new List<string>("ABCDEFGHIJKLMNOPQRSTUVWXYZ".ToCharArray().Select(c => c.ToString()).ToList());
        List<string> WordList = new List<string>();
        string AdjectiveFileName = "english_adjectives.txt";
        string VerbFileName = "english_verbs.txt";
        string NounFileName = "english_nouns.txt";
        string DataDirectory = ".\\libAnna\\";
        int numPlayer = 1;
        int asLength;
        int isWord;
        int asLocation;
        string asWord;

        public Form1()
        {
            InitializeComponent();

            btnEndTurn.Visible = false;
            Random random = new Random();

            List<string> lstVerbs = new List<string>();
            List<string> lstAdjectives = new List<string>();
            List<string> lstNouns = new List<string>();

            listBoxResults.Items.Clear();
            lblTurnDisplay.Text = "Player " + numPlayer.ToString();
            btnNewTurn.Enabled = false;

            lstAdjectives = File.ReadAllLines(DataDirectory + AdjectiveFileName).ToList();
            lstNouns = File.ReadAllLines(DataDirectory + NounFileName).ToList();
            lstVerbs = File.ReadAllLines(DataDirectory + VerbFileName).ToList();

            WordList = lstAdjectives.Concat(lstVerbs).Concat(lstNouns).ToList();
            asWord = WordList[random.Next(WordList.Count)];

            Randomize();
            lblAcronymDisplay.Text = SetAcronymDisplay(asLength);
        }

        private static int WeightedRandomLength()
        {
            Random random = new Random();
            // Define weights for each length from 2 to 7
            Dictionary<int, int> weights = new Dictionary<int, int>
            {
                { 2, 5 },
                { 3, 55 },
                { 4, 30 },
                { 5, 5 },
                { 6, 3 },
                { 7, 2 }
            };

            // Calculate the total weight
            int totalWeight = weights.Values.Sum();

            // Generate a random number between 0 and totalWeight - 1
            int randomNumber = random.Next(totalWeight);

            // Determine the length based on the random number and weights
            int cumulativeWeight = 0;
            foreach (var kvp in weights)
            {
                cumulativeWeight += kvp.Value;
                if (randomNumber < cumulativeWeight)
                {
                    return kvp.Key;
                }
            }

            // Fallback in case of an error
            return 2;
        }

        private string SetAcronymDisplay(int nymLength)
        {
            Random random = new Random();
            string tAcronymDisplay = string.Empty;
            for (int i = 0; i < nymLength; i++)
            {
                if (isWord == 0) { tAcronymDisplay += asChar[random.Next(asChar.Count)] + " "; }
                else { tAcronymDisplay += (i == asLocation ? char.ToUpper(asWord[0]) + asWord.Substring(1) : asChar[random.Next(asChar.Count)]) + " "; }
            }
            return tAcronymDisplay.Trim();
        }

        private void Randomize()
        {
            Random random = new Random();
            asLength = WeightedRandomLength();
            asLocation = random.Next(0, asLength);
            isWord = random.Next(0, 2);
            asWord = WordList[random.Next(WordList.Count)];
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            Size = new Size(745, 230);
        }

        private void btnExit_Click(object sender, EventArgs e)
        {
            Application.Exit();
        }

        private void RandomizeListBox(ListBox lbox)
        {
            ListBox.ObjectCollection list = lbox.Items;
            Random random = new Random();
            int n = list.Count;
            lbox.BeginUpdate();
            while (n > 1)
            {
                n--;
                int k = random.Next(n + 1);
                object value = list[k];
                list[k] = list[n];
                list[n] = value;
            }
            lbox.EndUpdate();
            lbox.Invalidate();
        }

        private void btnEndTurn_Click(object sender, EventArgs e)
        {
            Size = new Size(745, 500);
            btnSubmit.Enabled = false;
            txtPlayerInput.Enabled = false;
            lblTurnDisplay.Text = "---";
            btnEndTurn.Enabled = false;
            btnNewTurn.Enabled = true;

            RandomizeListBox(listBoxResults);
        }

        private void btnNewTurn_Click(object sender, EventArgs e)
        {
            Size = new Size(745, 230);
            numPlayer = 1;
            lblTurnDisplay.Text = "Player " + numPlayer.ToString();
            btnSubmit.Enabled = true;
            txtPlayerInput.Enabled = true;
            listBoxResults.Items.Clear();
            btnEndTurn.Enabled = true;
            btnNewTurn.Enabled = false;
            btnReroll.Enabled = true;
            btnReroll.Visible = true;
            btnEndTurn.Visible = false;

            Randomize();
            lblAcronymDisplay.Text = SetAcronymDisplay(asLength);
        }

        private void btnSubmit_Click(object sender, EventArgs e)
        {
            if (txtPlayerInput.Text == "") { return; }
            listBoxResults.Items.Add(txtPlayerInput.Text);
            txtPlayerInput.Text = string.Empty;
            numPlayer++;
            lblTurnDisplay.Text = "Player " + numPlayer.ToString();
            btnReroll.Enabled = false;
            btnReroll.Visible = false;
            btnEndTurn.Visible = true;
        }

        private void bteReroll_Click(object sender, EventArgs e)
        {
            Randomize();
            lblAcronymDisplay.Text = SetAcronymDisplay(asLength);
        }

        private void txtPlayerInput_TextChanged(object sender, EventArgs e)
        {

        }

        private void txtPlayerInput_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter) { btnSubmit_Click(sender, e); e.Handled = true; e.SuppressKeyPress = true; }
        }

        private void btnAbout_Click(object sender, EventArgs e)
        {
            AboutBox1 box = new AboutBox1();
            box.ShowDialog();
        }
    }
}
